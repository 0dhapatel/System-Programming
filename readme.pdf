Deanna Miceli and Dhaval Patel

The Huffmancode book is made by first tokensizing the file found. The process is similar when there is a R flag. 
In tokanizing we have used the strtok() function in the string.h header file. After that we have used a parallel array to copy 
the word from tokanizing to the string 2d pointer. When  a NULL space is found the word is inserted and the frequency becomes 
When the word is similar to another, the frquency increases instead and the word is kept the same. From there the hufffman 
codebook is made by calling on the huffman code. The tree is made using the data structure heaps and nodes. The heap is made 
by realizing how many unique words are preseant. After each comparison the node is either combined with another or combined 
with the tree based on the comparrison of the numbers in the heap. The samellest number is kept on the left side while the 
biggest is kept on the right side. Similarlly the left side is binary of 0's while right side is binary of 1's. First we made 
a leaf node for each remarkable character and amass a min heap of all leaf centers (Min Heap is used as a need line. The 
estimation of repeat field is used to consider two centers in min store. At first, the least ceaseless character is at root). 
Next we concentrate two center points with the base repeat from the min store. Then, we made another inside center point with 
repeat equal to the entire of the two centers frequencies. Make the primary evacuated center as its left child and the other
removed center as its right tyke. Add this center point to the min heap. The remainder of the center is the root center and 
the tree is done. Thats how our b flag and R and b flag were taken care of.


Compress and Decompress both rely on Binary Trees which are contructed based on the codebook given to us. The binary tree nodes
contain the binary value and word for each token in the codebook, and the nodes are constructed with the function newNode() and 
freed with the function freeNodes(). Compress() and decompress() open and read the given files, create nodes, and insert them 
using insertGivenToks(). Then an output file is opened, the file for compression/decompression is opened and read to find the tokens.
For compress() the function searchWord() finds and returns the binary value of the given word; similarly searchBin() finds and returns the token 
value of a given binary string. The return value of these functions is written to the output file until all of the file is read.
Finally the flies are closed and the tree is freed. 

The main() function in fileCompressor.c examines the given arguments and calls buildMode() on the given arguments. buildMode()
checks for input error in the number of arguments, ordering of arguments, as well as format of the arguments. It returns ERR to indicate
error, otherwise returns a struct flags containing the argument information. Main() then examines the returned struct flags and 
if the -R flag was specified it calls the corresponding recursive functions, otherwise it calls the non-recursive build, compress, 
and decompress functions.


